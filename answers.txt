1)

    1 CPU:

        # of Context Switches: 99
        Total execution time: 67.6 s
        Total time spent in READY state: 389.9 s

    2 CPUs: 

        # of Context Switches: 108
        Total execution time: 35.8 s
        Total time spent in READY state: 92.2 s

    4 CPUs:

        # of Context Switches: 185
        Total execution time: 33.4 s
        Total time spent in READY state: 0.3 s

    The total execution time decreases by half going from 1 CPU to 2 CPUs, but then with the addition of two more CPUs total execution time only decreases by about 2%. This would suggest that there is not a linear relationship between the number of CPUs and total execution time. There are diminishing returns from adding processors because processes can't be divided into subprocesses and run in parallel across all CPUs. The large decrease in total execution time between 1 CPU and 2 CPUs was because with 1 CPU, processes were spending large amounts of time in the ready queue, but the addition of another CPU drastically reduced this.    

2)

    800ms: 
    
        # of Context Switches: 136
        Total execution time: 67.6 s
        Total time spent in READY state: 325.4 s
        
    600ms:
        
        # of Context Switches: 161
        Total execution time: 67.6 s
        Total time spent in READY state: 314.5 s
        
    400ms:
    
        # of Context Switches: 203
        Total execution time: 67.6 s
        Total time spent in READY state: 298.8 s
        
    200ms:
        
        # of Context Switches: 362
        Total execution time: 67.5 s
        Total time spent in READY state: 285.2 s
        
    We would not want to pick the shortest timeslice because context switches take time to perform and the shorter our timeslices, the more context switches we will do. Using the shortest possible timeslice would be particularly inefficient with long processes.
    
3)

    FIFO: 
    
        1 CPU:

        # of Context Switches: 99
        Total execution time: 67.6 s
        Total time spent in READY state: 389.9 s

    Round Robin:
    
        1 CPU / 200ms:

            # of Context Switches: 362
            Total execution time: 67.5 s
            Total time spent in READY state: 285.2 s
            
    Static Priority:
    
        1 CPU:
        
            # of Context Switches: 168
            Total execution time: 68.3 s
            Total time spent in READY state: 160.4 s

    Round robin with a short timeslice is the closest approximation to SJF because longer jobs will get interrupted (and consequently finish slower) more frequently than shorter jobs. With the assumption that priority and the length of a job are not correlated, the other two scheduling algorithms have no relationship between job length and the order in which the jobs are scheduled. If that assumption is not true, then static priority could become a better approximation of SJF if priority and job length are very closely related. FIFO is clearly the worst with a wait time much larger than the others. Static Priority significantly outperforms Round Robin in our tests with 1 CPU, this implies that in this simulation the priority of a job is aligned with the length of the job.
    
4)

    Multi-Level Feedback

        800ms: 
            
            # of Context Switches: 138
            Total execution time: 67.7 s
            Total time spent in READY state: 396.3 s

        600ms:

            # of Context Switches: 163
            Total execution time: 67.7 s
            Total time spent in READY state: 396.3 s

        400ms:

            # of Context Switches: 205
            Total execution time: 67.7 s
            Total time spent in READY state: 396.3 s
            
    
    Round Robin is heavily dependent on the time slice and the time spent in ready state gets worse as the time slice increases. This is the case as Round Robin performs similarly to SJF with short timeslices (especially without the overhead of an actual hardware implementation). This is not the case for MLFS, the time spent in the ready state is almost constant .

           
    